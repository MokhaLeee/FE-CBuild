import os, sys, glob, codecs, shutil
from PIL import Image
from datetime import date
import numpy as np
import Png2Font

# python MakeGlyphInstaller.py FE8U.gba

# 读取字模长度
def GetGlyphLen(img):
		
	for i in range(15, 0, -1):
		for j in range(0, 15):
			if 0 != img[j, i]:
				return i
	return 0

def InitInstaller(installer_dir):
	font_installer = installer_dir + "/FontInstaller.event"
	main_installer = installer_dir + "/../InstallGlyph.event"
	config_file = installer_dir + "/InstallConfig.event"

	# remove existing files
	if os.path.exists(config_file):
		os.remove(config_file)

	if os.path.exists(main_installer):
		os.remove(main_installer)

	if os.path.exists(font_installer):
		os.remove(font_installer)

	# init config file
	with open(config_file, 'w') as fp_config:
		fp_config.write("// conig file\n")

	# make main file
	with open(main_installer, 'w') as fp_main:
		fp_main.write('// Auto generated by utf8-glyph-generator on {}\n\n'.format(date.today()))
		fp_main.write("ALIGN 4\n")
		fp_main.write("#include \"FontInstaller/FontTableDef.event\"\n")
		fp_main.write("#include \"FontInstaller/InstallConfig.event\"\n")
		fp_main.write("#include \"FontInstaller/FontInstaller.event\"\n")

	with open(font_installer, 'w') as fp_font:
		fp_font.write("#define Fonts(UTFlow, width) \"ALIGN 4; PUSH; ORG CURRENTOFFSET-0x48; POIN CURRENTOFFSET+0x48; POP; WORD $0; BYTE UTFlow width 0 0\"\n")

		for i in range(0x100):
			fp_font.write("#ifdef ___Item_"+ "{:04X}".format(i) + "_\n")
			fp_font.write("\tALIGN 4\n")
			fp_font.write("\tWORD 0 0 0 0\n")
			fp_font.write("\tWORD 0 0 0 0\n")
			fp_font.write("\tWORD 0 0 0 0\n")
			fp_font.write("\tWORD 0 0 0 0\n")
			fp_font.write("\tWORD 0 0 0 0\n")
			fp_font.write("\tItem_" + "{:04X}".format(i) + "_Next:\n")
			fp_font.write("\t#include \"Item_" + "{:04X}".format(i) + "_.event\"\n")
			fp_font.write("#endif\n\n")

			fp_font.write("#ifdef ___Text_"+ "{:04X}".format(i) + "_\n")
			fp_font.write("\tALIGN 4\n")
			fp_font.write("\tWORD 0 0 0 0\n")
			fp_font.write("\tWORD 0 0 0 0\n")
			fp_font.write("\tWORD 0 0 0 0\n")
			fp_font.write("\tWORD 0 0 0 0\n")
			fp_font.write("\tWORD 0 0 0 0\n")
			fp_font.write("\tText_" + "{:04X}".format(i) + "_Next:\n")
			fp_font.write("\t#include \"Text_" + "{:04X}".format(i) + "_.event\"\n")
			fp_font.write("#endif\n\n")

		fp_font.write("PUSH\n")

		for i in range(0x100):
			fp_font.write("#ifdef ___Item_"+ "{:04X}".format(i) + "_\n")
			fp_font.write("\tORG Item_" + "{:04X}".format(i) + "_ORG_\n")
			fp_font.write("\tPOIN Item_" + "{:04X}".format(i) + "_Next\n")
			fp_font.write("#endif\n\n")

			fp_font.write("#ifdef ___Text_"+ "{:04X}".format(i) + "_\n")
			fp_font.write("\tORG Text_" + "{:04X}".format(i) + "_ORG_\n")
			fp_font.write("\tPOIN Text_" + "{:04X}".format(i) + "_Next\n")
			fp_font.write("#endif\n\n")

		fp_font.write("POP\n")

def AppendFontInstaller(glyph_file, installer_dir):
	glyph_file_name = os.path.basename(glyph_file)
	name_wo_ext = os.path.splitext(glyph_file_name)[0]
	glyth_type = glyph_file_name[4:8]
	glyth_name = glyph_file_name[8]
	glyth_name_uni = ord(glyth_name)
	glyth_img = Png2Font.GetImgArray(glyph_file)

	installer_file = installer_dir + "/" + glyth_type + \
		"_" + "{:04X}".format(0xFF & glyth_name_uni) + "_.event"

	if not os.path.exists(installer_file):
		with open(installer_file, 'w') as fp:
			fp.write("// Sub Font Installer\n")

	with codecs.open(installer_file, 'a', encoding='utf-8') as fp:
		fp.write("ALIGN 4\n")
		fp.write("Fonts(0x" + "{:04X}".format(0xFF & (glyth_name_uni>>8)) + ", " + str(GetGlyphLen(glyth_img)) + ")\n")
		fp.write("\t#incbin \"../FontData/" + name_wo_ext + ".fefont\"\n")
		fp.write("\n")

	if glyth_type == "Item":
		return 0x100 + (0xFF & glyth_name_uni)
	else:
		return (0xFF & glyth_name_uni)

def MakeFontTable(gba_file, table_file):
	(input_name, input_ext) = os.path.splitext(gba_file)

	if not ".gba" == input_ext:
		sys.exit("please input a gba file to make FontTable!")

	if os.path.exists(table_file):
		os.remove(table_file)

	FontTableItemAt = 0x58C7EC;
	FontTableTextAt = 0x58F6F4;

	FontItemTable = np.fromfile(
		gba_file, 
		dtype = np.uint8, 
		count = 0x400,
		offset = FontTableItemAt,
		)

	FontTextTale = np.fromfile(
		gba_file, 
		dtype = np.uint8, 
		count = 0x400,
		offset = FontTableTextAt
		)

	with open(table_file, 'w') as fp_table:

		fp_table.write("#ifndef FONTTABLE_DEF\n")
		fp_table.write("#define FONTTABLE_DEF\n")
		fp_table.write("\n")
		fp_table.write("#define gpFontTableItem 0x058C7EC\n")
		fp_table.write("#define gpFontTableText 0x058F6F4\n")
		fp_table.write("\n")

		for i in range(0x100):
			# Item Table
			ptr = 0 \
				+ FontItemTable[4 * i + 0] \
				+ FontItemTable[4 * i + 1] * 0x100 \
				+ FontItemTable[4 * i + 2] * 0x10000 \
			#	+ FontItemTable[4 * i + 3] * 0x1000000

			if 0 == ptr:
				ptr = FontTableItemAt + 4 * i

			fp_table.write(
				"#define Item_" + 
				"{:04X}".format(i) + 
				"_ORG_ 0x" + 
				"{:08X}".format( ptr ) + 
				"\n")

			# Text Table
			ptr = 0 \
				+ FontTextTale[4 * i + 0] \
				+ FontTextTale[4 * i + 1] * 0x100 \
				+ FontTextTale[4 * i + 2] * 0x10000 \
			#	+ FontTextTale[4 * i + 3] * 0x1000000

			if 0 == ptr:
				ptr = FontTableTextAt + 4 * i

			fp_table.write(
				"#define Text_" + 
				"{:04X}".format(i) + 
				"_ORG_ 0x" + 
				"{:08X}".format( ptr ) + 
				"\n")

		fp_table.write("#endif // FONTTABLE_DEF\n")

def main():
	current_path = os.getcwd()
	installer_dir = current_path + "/FontInstaller"
	config_file = installer_dir + "/InstallConfig.event"
	table_file = installer_dir + "/FontTableDef.event"

	# as input a .gba file
	if len(sys.argv) < 2:
		sys.exit("please input a gba file to make FontTable!")

	if len(sys.argv) > 2:
		MakeFontTable( sys.argv[1], table_file )
		sys.exit("only updated TableDef!")

	# mkdir installer folder
	if os.path.exists(installer_dir):
		shutil.rmtree(installer_dir)

	os.mkdir(installer_dir)

	# make file "FontTableDef.event"
	MakeFontTable( sys.argv[1], table_file )

	# make file "FontInstaller.event"
	InitInstaller(installer_dir)

	glyph_files = glob.glob(r'FontData/*.png')

	# a config array to make file "InstallConfig.event"
	config_flag = np.zeros(0x200) 

	for file in glyph_files:
		# make ".fefont" file
		Png2Font.Png2Font(file)

		# make "Item_00X0.event" or "Text_00X0.event"
		config_flag[ AppendFontInstaller(file, installer_dir)] = 1

	# Auto generate all of the sub-dirs for matching on ea-dep
	for i in range(0x100):
		sub_fontitem_file = installer_dir + "/Item_" + "{:04X}".format(i) + "_.event"

		if not os.path.exists(sub_fontitem_file):
			with open(sub_fontitem_file, 'w') as fp:
				fp.write("// Sub Font Installer\n")

		sub_fonttext_file = installer_dir + "/Text_" + "{:04X}".format(i) + "_.event"

		if not os.path.exists(sub_fonttext_file):
			with open(sub_fonttext_file, 'w') as fp:
				fp.write("// Sub Font Installer\n")

	# make file "InstallConfig.event"
	with codecs.open(config_file, 'a', encoding='utf-8') as fp:
		for i in range(0x100):
			if config_flag[i] == 1 :
				fp.write("#define ___Text_" + "{:04X}".format(i) + "_\n")

			if  config_flag[i+0x100] == 1 :
				fp.write("#define ___Item_" + "{:04X}".format(i) + "_\n")

if __name__ == '__main__':
    main()
